name: Production Deploy

on:
  push:
    branches:
      - master
    # Não roda CI se tiver apenas alterações nas pastas listadas
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#excluding-paths
    paths-ignore:
      - '!docs/**'
# Disponibiliza as variáveis de ambiente para todos os jobs/steps
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#env
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# Os jobs são executados em paralelo, caso seja necessário um esperar o outro deve-se usar: `needs: nome_do_outro_job`
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobs
jobs:
  buildApp:
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsif
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    name: Build APP
    runs-on: ubuntu-latest
    steps:
      - name: Commit Checkout
        uses: actions/checkout@v2

      - name: Cache node_modules
        uses: actions/cache@v1
        id: cache_node_modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-v1-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-v1-node-${{ env.cache-name }}-

      - name: npm install
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsrun
        run: npm install --no-progress --no-audit
        working-directory: ./app

      - name: build
        run: npm run build
        working-directory: ./app

      - name: Upload build artifact
        uses: actions/upload-artifact@v1
        with:
          name: build-dist
          path: app/dist

  # deployProducts:
  #   if: "!contains(github.event.head_commit.message, '[skip-ci]')"
  #   name: Deploy Products Service 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Commit Checkout
  #     - uses: actions/checkout@v2

  #     - name: npm install
  #       run: npm install --no-progress --no-audit
  #       with:
  #         path: services/products

  #     - name: serverless deploy
  #       uses: serverless/github-action@v1.53.0
  #       with:
  #         path: services/products
  #         args: deploy

  deployApp:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    needs: buildApp
    name: Deploy App 
    runs-on: ubuntu-latest
    steps:
      - name: Download app build artifact
        uses: actions/download-artifact@v1
        with:
          name: build-dist
      - name: Test
        run: |
          ls
          cd dist
        working-directory: ./app
