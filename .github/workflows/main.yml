name: Production Deploy

on:
  push:
    branches:
      - master
    # Não roda CI se tiver apenas alterações nas pastas listadas
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#excluding-paths
    paths-ignore:
      - '!docs/**'

# Disponibiliza as variáveis de ambiente para todos os jobs/steps
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#env
env:
  AWS_STAGE: 'prod'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# Os jobs são executados em paralelo, caso seja necessário um esperar o outro deve-se usar: `needs: nome_do_outro_job`
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobs
jobs:
  buildApp:
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsif
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    name: Build App
    runs-on: ubuntu-latest
    env:
      path: 'app'
    steps:
      - name: Commit Checkout
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v1
        id: service_deps_cache
        with:
          # Expressions doesn't accept JSON so the expression: `join([], '')` wouldn't work
          # path: ${{ format('{0}/{1}/{2}', '.', env.path, 'node_modules') }}
          path: ${{ format('{0}/{1}', env.path, 'node_modules') }}
          key: ${{ runner.os }}-v1-node-${{ hashFiles(format('{0}/{1}', env.path, 'package-lock.json')) }}

      - name: npm install
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsrun
        run: npm ci
        working-directory: ${{ format('{0}/{1}', '.', env.path) }}

      - name: build
        run: npm run build
        working-directory: ${{ format('{0}/{1}', '.', env.path) }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v1
        with:
          name: build-dist
          path: ${{ format('{0}/{1}', env.path, 'dist') }}

  deployServices:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      matrix:
        service: [
          products,
          users,
        ]
    name: Deploy ${{ matrix.service }} Service
    runs-on: ubuntu-latest
    env:
      path: 'services/${{ matrix.service }}/'
    steps:
      - name: Commit Checkout
        if: env.path != ''
        uses: actions/checkout@v2

      - name: Get npm cache directory
        if: env.path != ''
        id: global_npm_cache_dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache global dependencies
        if: env.path != ''
        uses: actions/cache@v1
        id: global_deps_cache
        with:
          path: ${{ steps.global_npm_cache_dir.outputs.dir }}
          key: ${{ runner.os }}-v1-node-${{ hashFiles(format('{0}/{1}', env.path, 'package-lock.json')) }}

      - name: Cache Service dependencies
        if: env.path != ''
        uses: actions/cache@v1
        id: service_deps_cache
        with:
          # Expressions doesn't accept JSON so the expression: `join([], '')` wouldn't work
          # path: ${{ format('{0}/{1}/{2}', '.', env.path, 'node_modules') }}
          path: ${{ format('{0}/{1}', env.path, 'node_modules') }}
          key: ${{ runner.os }}-v1-node-${{ hashFiles(format('{0}/{1}', env.path, 'package-lock.json')) }}

      - name: npm install
        if: steps.service_deps_cache.outputs.cache-hit != 'true' && env.path != ''
        run: npm ci
        working-directory: ${{ format('{0}/{1}', '.', env.path) }}

      - name: serverless deploy
        if: env.AWS_STAGE == '' && env.path != ''
        run: npx sls deploy
        working-directory: ${{ format('{0}/{1}', '.', env.path) }}

      - name: serverless deploy with stage
        if: env.AWS_STAGE != '' && env.path != ''
        run: npx sls deploy -s ${{ env.AWS_STAGE }}
        working-directory: ${{ format('{0}/{1}', '.', env.path) }}

  deployApp:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    needs: [buildApp, deployServices]
    name: Deploy App 
    runs-on: ubuntu-latest
    steps:
      - name: Download app build artifact
        uses: actions/download-artifact@v1
        with:
          name: build-dist

      - name: Test
        run: ls

      - name: Try cd build folder
        run: |
          cd build-dist
          ls
